# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-04 07:17
from __future__ import unicode_literals

from django.db import migrations
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist
from django.contrib.auth.management import create_permissions

import logging

logger = logging.getLogger(__name__)


def add_default_member_permission(apps, schema_editor):
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, apps=apps, verbosity=0)
        app_config.models_module = None

    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")

    try:
        perm = Permission.objects.get(codename='request_groups', name='Can request non-public groups')
        group = Group.objects.get(name=getattr(settings, str('DEFAULT_AUTH_GROUP'), 'Member'))
        group.permissions.add(perm)
    except ObjectDoesNotExist:
        logger.warning('Failed to add default request_groups permission to Member group')


class Migration(migrations.Migration):

    dependencies = [
        ('groupmanagement', '0005_authgroup_public'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='authgroup',
            options={'permissions': (('request_groups', 'Can request non-public groups'),)},
        ),
        migrations.RunPython(add_default_member_permission),
    ]
